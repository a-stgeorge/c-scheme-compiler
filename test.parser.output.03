(define lazy-infinite-range (lambda (first) (cons first (lambda () (lazy-infinite-range (+ first 1)))))) (define first-n (lambda (llst n) (if (or (equal? llst ' ()) (< n 1)) ' () (cons (car llst) (first-n ((cdr llst)) (- n 1)))))) (define nth (lambda (llst n) (and (not (equal? llst ' ())) (if (< n 2) (car llst) (nth ((cdr llst)) (- n 1)))))) (define lazy-filter (lambda (predicate llst) (if (equal? llst ' ()) ' () (if (predicate (car llst)) (cons (car llst) (lambda () (lazy-filter predicate ((cdr llst))))) (lazy-filter predicate ((cdr llst))))))) (define not-divisible-by (lambda (d) (lambda (n) (not (equal? (modulo n d) 0))))) (define seive (lambda (llst) (lazy-filter (not-divisible-by (car llst)) ((cdr llst))))) (define primes-rec (lambda (llst) (cons (car llst) (lambda () (primes-rec (seive llst)))))) (define primes (lambda () (primes-rec (lazy-infinite-range 2))))

(quote ())

(define x 5)
x

(modulo x 3.0)

(= x 5.0)

(if #f 3)

(modulo 3 5)

(define zero?
	(lambda (x)
		(= x 0)))

(define append
  (lambda (l1 l2)
    (if (null? l1)
        l2
        (cons (car l1) (append (cdr l1) l2)))))

(define list
  (lambda args
    args))

(define range
  (lambda (n)
    (if (zero? n)
        (quote ())
        (append (range (- n 1)) (list n)))))

(range 15)

(*)
(* 1)
(* 2)
(* 0)
(* 5 3)
(* 5 0)
(* 0 5)
(* 1 2 3)
(* 1 0 2)

;(-)
(- 1)
(- 5)
(- 0)
(- 1 2 3 4)
(- -1 2 3 4)
(- -1 2 -3 4)

(/ 1 1)
(/ 1 2 3)
;(/ 1 0 3)
(/ 0 1)
(/ 0 1 2 3)
;(/)
(/ 1)
(/ 3)
;(/ 0)
;(/ 3 0 5)

(<= 3 5)
(<= 5 3)
(<=)
(<= 5)
(<= -5)
(<= 3 3)
(<= -5000000)
(<= 50000000)
(<= 1 2 3 4 5)
(<= 1 2 5 3 4)

(eq? 3 5)
(eq? 3 3)
(eq? (quote ()) (quote ())) ;It is understood that this is different than the result in DrRacket,
;but this is related to how we handle the storage of empty lists
(eq? x x)
;(eq?)
;(eq? 1)
;(eq? 1 2 3)

(define a 1)
(define b 2)
(define c 3)
(pair? (quote (a b c)))
(pair? a)
(define d (cons 1 2))
(pair? (cons 1 2))
(pair? (quote ()))
(pair? (quote (a)))

(= 1 2 3)
(= 1 1 1 1 1)
(= 5 5)

(define arguments (quote (1 2 3)))
(apply + arguments)

(apply + -1 2 -3 (quote (10 20)))
(apply append (quote (1 2 3)) (quote (a b)) (quote (c d e)) (quote (f g)))
